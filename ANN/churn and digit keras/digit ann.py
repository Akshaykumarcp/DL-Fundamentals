from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.datasets import mnist
import numpy as np

(xtrain,ytrain),(xtest,ytest)=mnist.load_data()
""" 
>>> (xtrain,ytrain)
(array([[[0, 0, 0, ..., 0, 0, 0],
        [0, 0, 0, ..., 0, 0, 0],
        [0, 0, 0, ..., 0, 0, 0],
        ...,
        [0, 0, 0, ..., 0, 0, 0],
        [0, 0, 0, ..., 0, 0, 0],
        [0, 0, 0, ..., 0, 0, 0]],

       [[0, 0, 0, ..., 0, 0, 0],
        [0, 0, 0, ..., 0, 0, 0],
        [0, 0, 0, ..., 0, 0, 0],
        ...,
        [0, 0, 0, ..., 0, 0, 0],
        [0, 0, 0, ..., 0, 0, 0],
        [0, 0, 0, ..., 0, 0, 0]],

       [[0, 0, 0, ..., 0, 0, 0],
        [0, 0, 0, ..., 0, 0, 0],
        [0, 0, 0, ..., 0, 0, 0],
        ...,
        [0, 0, 0, ..., 0, 0, 0],
        [0, 0, 0, ..., 0, 0, 0],
        [0, 0, 0, ..., 0, 0, 0]],

       ...,

       [[0, 0, 0, ..., 0, 0, 0],
        [0, 0, 0, ..., 0, 0, 0],
        [0, 0, 0, ..., 0, 0, 0],
        ...,
        [0, 0, 0, ..., 0, 0, 0],
        [0, 0, 0, ..., 0, 0, 0],
        [0, 0, 0, ..., 0, 0, 0]],

       [[0, 0, 0, ..., 0, 0, 0],
        [0, 0, 0, ..., 0, 0, 0],
        [0, 0, 0, ..., 0, 0, 0],
        ...,
        [0, 0, 0, ..., 0, 0, 0],
        [0, 0, 0, ..., 0, 0, 0],
        [0, 0, 0, ..., 0, 0, 0]],

       [[0, 0, 0, ..., 0, 0, 0],
        [0, 0, 0, ..., 0, 0, 0],
        [0, 0, 0, ..., 0, 0, 0],
        ...,
        [0, 0, 0, ..., 0, 0, 0],
        [0, 0, 0, ..., 0, 0, 0],
        [0, 0, 0, ..., 0, 0, 0]]], dtype=uint8), array([5, 0, 4, ..., 5, 6, 8], dtype=uint8)) """

mnist_model=Sequential()

mnist_model.add(Dense(units=64,kernel_initializer='uniform',
                      activation='relu',input_dim=784))

mnist_model.add(Dense(units=10,activation='softmax'))

mnist_model.compile(optimizer='adam',loss='categorical_crossentropy',
                    metrics=['accuracy'])

mnist_model.summary()
""" 
Model: "sequential_1"
_________________________________________________________________
Layer (type)                 Output Shape              Param #
=================================================================
dense_3 (Dense)              (None, 64)                50240
_________________________________________________________________
dense_4 (Dense)              (None, 10)                650
=================================================================
Total params: 50,890
Trainable params: 50,890
Non-trainable params: 0
_________________________________________________________________ """

xtrain = xtrain/255
""" 
array([[[0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        ...,
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.]],

       [[0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        ...,
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.]],

       [[0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        ...,
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.]],

       ...,

       [[0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        ...,
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.]],

       [[0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        ...,
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.]],

       [[0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        ...,
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.],
        [0., 0., 0., ..., 0., 0., 0.]]]) """

xtrain = xtrain.reshape(-1, 784).astype('float32')
""" 
array([[0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       ...,
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.]], dtype=float32) """

xtest = xtest/255
xtest = xtest.reshape(-1, 784).astype('float32')

# from tensorflow.keras.utils import np_utils
from tensorflow.keras.utils import to_categorical

# Now we one hot encode outputs
ytrain = to_categorical(ytrain)
""" 
array([[0., 0., 0., ..., 0., 0., 0.],
       [1., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       ...,
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 1., 0.]], dtype=float32) """

ytest = to_categorical(ytest)
""" 
array([[0., 0., 0., ..., 1., 0., 0.],
       [0., 0., 1., ..., 0., 0., 0.],
       [0., 1., 0., ..., 0., 0., 0.],
       ...,
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.]], dtype=float32) """

mnist_model.fit(xtrain,ytrain,batch_size=10,epochs=10)
""" 
Epoch 1/10
6000/6000 [==============================] - 3s 518us/step - loss: 0.2526 - accuracy: 0.9269
Epoch 2/10
6000/6000 [==============================] - 4s 604us/step - loss: 0.1214 - accuracy: 0.9635
Epoch 3/10
6000/6000 [==============================] - 3s 508us/step - loss: 0.0869 - accuracy: 0.9726
Epoch 4/10
6000/6000 [==============================] - 3s 508us/step - loss: 0.0689 - accuracy: 0.9786
Epoch 5/10
6000/6000 [==============================] - 3s 507us/step - loss: 0.0571 - accuracy: 0.9818
Epoch 6/10
6000/6000 [==============================] - 3s 507us/step - loss: 0.0487 - accuracy: 0.9841
Epoch 7/10
6000/6000 [==============================] - 3s 506us/step - loss: 0.0401 - accuracy: 0.9869
Epoch 8/10
6000/6000 [==============================] - 3s 504us/step - loss: 0.0356 - accuracy: 0.9883
Epoch 9/10
6000/6000 [==============================] - 3s 510us/step - loss: 0.0305 - accuracy: 0.9902
Epoch 10/10
6000/6000 [==============================] - 3s 525us/step - loss: 0.0269 - accuracy: 0.9912
<tensorflow.python.keras.callbacks.History object at 0x0000026D88ADD608> """

ypred=mnist_model.predict(xtest)
""" 
array([[5.9545191e-10, 3.3518737e-14, 1.1357665e-09, ..., 9.9999869e-01,
        4.2537823e-10, 1.3017437e-08],
       [1.1448528e-09, 2.7326026e-08, 1.0000000e+00, ..., 6.3805947e-20,
        2.2295097e-13, 2.0962295e-20],
       [5.2934452e-09, 9.9948943e-01, 1.1055696e-05, ..., 1.1020080e-04,
        3.8722894e-04, 1.7160816e-07],
       ...,
       [1.5363971e-21, 3.9302303e-15, 7.2209380e-17, ..., 7.0611508e-09,
        2.5281238e-10, 8.4649372e-08],
       [1.4569761e-14, 2.2928011e-14, 3.9225796e-19, ..., 2.9497648e-14,
        4.9295745e-06, 6.7925547e-16],
       [7.7810869e-09, 4.5846450e-15, 9.1612672e-12, ..., 1.0365879e-15,
        2.9203846e-17, 3.1537542e-12]], dtype=float32) """

ypred=(ypred>0.5).astype('float32')
""" 
array([[0., 0., 0., ..., 1., 0., 0.],
       [0., 0., 1., ..., 0., 0., 0.],
       [0., 1., 0., ..., 0., 0., 0.],
       ...,
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.]], dtype=float32) """

from sklearn.metrics import confusion_matrix, accuracy_score
acc=accuracy_score(ytest,ypred) # 0.9741
matrix = confusion_matrix(ytest.argmax(axis=1), ypred.argmax(axis=1))
""" 
array([[ 968,    0,    1,    1,    1,    2,    3,    2,    2,    0],
       [   0, 1121,    2,    1,    0,    2,    2,    1,    6,    0],
       [   8,    0, 1007,    2,    3,    0,    2,    3,    7,    0],
       [   4,    0,    7,  982,    0,    5,    0,    4,    5,    3],
       [   6,    0,    3,    0,  946,    1,    3,    7,    1,   15],
       [   2,    0,    0,   11,    0,  870,    0,    4,    4,    1],
       [   7,    3,    2,    0,    5,    7,  929,    0,    4,    1],
       [   7,    2,    9,    1,    0,    1,    0,  994,    3,   11],
       [   7,    0,    4,    3,    3,    6,    1,    2,  943,    5],
       [   0,    1,    0,    2,    9,    3,    0,    8,    4,  982]],
      dtype=int64) """